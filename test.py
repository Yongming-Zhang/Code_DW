import torch
import numpy as np
w = torch.Tensor([4., 8., 16., 32., 64.])
w_r = torch.Tensor([2., 1., 0.5])
s = torch.Tensor([8., 16., 32., 64., 128.])
a =  w * w_r[:,None]
print(w_r[:,None])
print(a)
a = s[None,:] * w_r[:,None]
print(s) 
print(a)
h = w * w_r[:,None] * s[None,:]
h_ = h.view(-1)
print(h)
print(h_)
x = torch.Tensor([1,2,3,4])
y = torch.Tensor([1,2,3,4])
xx = x.repeat(len(y))
print(xx)
yy = y.view(-1,1).repeat(1,len(x)).view(-1)
print(y.view(-1,1).repeat(1,len(x)))
print(xx,yy)
a = torch.Tensor([1,2])
b = torch.Tensor([[2,4],[2,3]])
v =a[:,None].expand(2,b.size(0)).transpose(0,1).contiguous().is_contiguous()
print(v)
m = torch.Tensor([[1], [2], [3], [4]])
print(m)
x = torch.Tensor([[4., 8., 16., 32.]])
s = x.mm(m)
print(s)
x = torch.arange(1,11).reshape(2,5)
print("number elements of x is ",x,x.numel())
y = torch.randn(3,10,5)
print("number elements of y is ",y.numel())
print(x.new_full((2,5),-1))
z = torch.arange(10).reshape(2,5)
v = z == 2
print(z==2)
print(x[v])
a = torch.rand(3,4)
b = torch.randn(1,4)
c = torch.cat([a],dim=0)
print('a',a,a.detach())
print(c)
x = c.sort()
print('x',c.sort()[0])
c = b.permute(1,0)
print(c,c[0].item())
i = torch.rand(2,3,4)
print(i,i.flatten(1))
def function(arg,*args,**kwargs):
    print(arg,args,kwargs)
a = dict(p='a')
b = dict()
b[1] = 10
function(5,6,7,8,9,'a',1, a, b, b=2, c=3)
index = dict()
for i in range(80):
    index[i] = i
